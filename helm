install helm

https://github.com/helm/helm/releases


wget https://storage.googleapis.com/kubernetes-helm/helm-v2.10.0-rc.2-linux-386.tar.gz
gunzip helm-v2.10.0-rc.2-linux-386.tar.gz
tar -xvf helm-v2.10.0-rc.2-linux-386.tar
cd linux-386
mv helm /usr/local/bin

[root@master-01 linux-386]# helm init
Creating /root/.helm 
Creating /root/.helm/repository 
Creating /root/.helm/repository/cache 
Creating /root/.helm/repository/local 
Creating /root/.helm/plugins 
Creating /root/.helm/starters 
Creating /root/.helm/cache/archive 
Creating /root/.helm/repository/repositories.yaml 
Adding stable repo with URL: https://kubernetes-charts.storage.googleapis.com 
Adding local repo with URL: http://127.0.0.1:8879/charts 
$HELM_HOME has been configured at /root/.helm.

Tiller (the Helm server-side component) has been installed into your Kubernetes Cluster.

Please note: by default, Tiller is deployed with an insecure 'allow unauthenticated users' policy.
To prevent this, run `helm init` with the --tiller-tls-verify flag.
For more information on securing your installation see: https://docs.helm.sh/using_helm/#securing-your-helm-installation
Happy Helming! 



[root@master-01 linux-386]# kubectl config current-context
kubernetes-admin@kubernetes
[root@master-01 linux-386]# helm init --upgrade
$HELM_HOME has been configured at /root/.helm.

Tiller (the Helm server-side component) has been upgraded to the current version.
Happy Helming!




[root@master-01 linux-386]# helm repo update
Hang tight while we grab the latest from your chart repositories...
...Skip local chart repository
...Successfully got an update from the "stable" chart repository
Update Complete. ⎈ Happy Helming!⎈ 



https://github.com/helm/charts/tree/master/stable/nginx-ingress



730 kubectl create serviceaccount tiller --namespace kube-system
731 kubectl create -f rbac-config.yaml
732 rm -rf ~/.helm/
733 kubectl create -f rbac-config.yaml
734 helm init --service-account tiller
735 kubectl create namespace tiller-world
736 kubectl create serviceaccount tiller --namespace tiller-world
737 kubectl create -f role-tiller.yaml
738 kubectl create -f rolebinding-tiller.yaml
739 helm init --service-account tiller --tiller-namespace tiller-world
740 helm install nginx --tiller-namespace tiller-world --namespace tiller-world
741 helm install stable/nginx --tiller-namespace tiller-world --namespace tiller-world
742 helm search
743 helm install stable/nginx-ingress --tiller-namespace tiller-world --namespace tiller-world

The command 740 which is fetching nginx chart from helm repositories is not found and when i search i found there is another name with stable/nginx-ingress as per 743 command
but when I check the pod status it showing one container is crashloopbackoff

#->kubectl get pods --namespace tiller-world
NAME READY STATUS RESTARTS AGE
queenly-cat-nginx-ingress-controller-687bf4b8f4-6l72r 0/1 CrashLoopBackOff 5 4m
queenly-cat-nginx-ingress-default-backend-558bc685df-vl4s4 1/1 Running 0 4m
tiller-deploy-6bf6bd5d98-xjq76 1/1 Running 0 5m

and when i check the logs it shows permission issue.
kubectl logs queenly-cat-nginx-ingress-controller-687bf4b8f4-6l72r --namespace tiller-world
I0123 14:09:34.244015 7 launch.go:113] &{NGINX 0.9.0-beta.15 git-a3e86f2 https://github.com/kubernetes/ingress}
I0123 14:09:34.244057 7 launch.go:116] Watching for ingress class: nginx
I0123 14:09:34.244370 7 launch.go:291] Creating API client for https://xx.xx.xx.xx1:443
I0123 14:09:34.263811 7 launch.go:304] Running in Kubernetes Cluster version v1.9 (v1.9.0) - git (clean) commit 925c127ec6b946659ad0fd596fa959be43f0cc05 - platform linux/amd64
F0123 14:09:34.264954 7 launch.go:136] ✖ It seems the cluster it is running with Authorization enabled (like RBAC) and there is no permissions for the ingress controller. Please check the configuration

When i finding appropriate solutions for it i have found already issue.
kubernetes/website#6390

And tried but it gets another error
helm install stable/nginx-ingress --tiller-namespace tiller-world --namespace tiller-world --set rbac.create=true
Error: release interesting-chinchilla failed: clusterroles.rbac.authorization.k8s.io is forbidden: User "system:serviceaccount:tiller-world:tiller" cannot create clusterroles.rbac.authorization.k8s.io at the cluster scope

Also Doc has to modify to use correct chart repository.
Any help will be appreciated. Its block for installing monocular.


#### 

curl -o get_helm.sh https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get

  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  6685  100  6685    0     0  16648      0 --:--:-- --:--:-- --:--:-- 16670


chmod +x get_helm.sh


[root@master-01 kuber]# ./get_helm.sh 
Downloading https://kubernetes-helm.storage.googleapis.com/helm-v2.9.1-linux-amd64.tar.gz
Preparing to install into /usr/local/bin
helm installed into /usr/local/bin/helm
Run 'helm init' to configure helm.



[root@master-01 kuber]# helm init
Creating /root/.helm 
Creating /root/.helm/repository 
Creating /root/.helm/repository/cache 
Creating /root/.helm/repository/local 
Creating /root/.helm/plugins 
Creating /root/.helm/starters 
Creating /root/.helm/cache/archive 
Creating /root/.helm/repository/repositories.yaml 
Adding stable repo with URL: https://kubernetes-charts.storage.googleapis.com 
Adding local repo with URL: http://127.0.0.1:8879/charts 
$HELM_HOME has been configured at /root/.helm.

Tiller (the Helm server-side component) has been installed into your Kubernetes Cluster.

Please note: by default, Tiller is deployed with an insecure 'allow unauthenticated users' policy.
For more information on securing your installation see: https://docs.helm.sh/using_helm/#securing-your-helm-installation
Happy Helming!


[root@master-01 kuber]# cd /root/.helm/repository
[root@master-01 repository]# ls
cache  local  repositories.yaml
[root@master-01 repository]# cat repositories.yaml 
apiVersion: v1
generated: 2018-08-15T07:00:14.583005167Z
repositories:
- caFile: ""
  cache: /root/.helm/repository/cache/stable-index.yaml
  certFile: ""
  keyFile: ""
  name: stable
  password: ""
  url: https://kubernetes-charts.storage.googleapis.com
  username: ""
- caFile: ""
  cache: /root/.helm/repository/cache/local-index.yaml
  certFile: ""
  keyFile: ""
  name: local
  password: ""
  url: http://127.0.0.1:8879/charts
  username: ""
  
  
[root@master-01 repository]# kubectl create serviceaccount --namespace kube-system tiller
serviceaccount/tiller created

[root@master-01 repository]# kubectl create clusterrolebinding tiller-cluster-rule --clusterrole=cluster-admin --serviceaccount=kube-system:tiller
clusterrolebinding.rbac.authorization.k8s.io/tiller-cluster-rule created

[root@master-01 repository]# kubectl patch deploy --namespace kube-system tiller-deploy -p '{"spec":{"template":{"spec":{"serviceAccount":"tiller"}}}}'
deployment.extensions/tiller-deploy patched

[root@master-01 repository]# helm init --service-account tiller --upgrade
$HELM_HOME has been configured at /root/.helm.

Tiller (the Helm server-side component) has been upgraded to the current version.
Happy Helming!

[root@master-01 repository]# kubectl get deployments -n kube-system
NAME                   DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
coredns                2         2         2            2           12m
kubernetes-dashboard   1         1         1            1           8m
tiller-deploy          1         1         1            1           4m


[root@master-01 repository]# kubectl run hello-app --image=gcr.io/google-samples/hello-app:1.0 --port=8080
deployment.apps/hello-app created


[root@master-01 repository]# kubectl expose deployment hello-app
service/hello-app exposed



[root@master-01 repository]# helm install --name nginx-ingress stable/nginx-ingress --set rbac.create=true
NAME:   nginx-ingress
LAST DEPLOYED: Wed Aug 15 07:06:43 2018
NAMESPACE: default
STATUS: DEPLOYED

RESOURCES:
==> v1/Service
NAME                           TYPE          CLUSTER-IP     EXTERNAL-IP  PORT(S)                     AGE
nginx-ingress-controller       LoadBalancer  10.106.229.32  <pending>    80:31945/TCP,443:31326/TCP  0s
nginx-ingress-default-backend  ClusterIP     10.101.179.17  <none>       80/TCP                      0s

==> v1beta1/Deployment
NAME                           DESIRED  CURRENT  UP-TO-DATE  AVAILABLE  AGE
nginx-ingress-controller       1        1        1           0          0s
nginx-ingress-default-backend  1        1        1           0          0s

==> v1beta1/PodDisruptionBudget
NAME                           MIN AVAILABLE  MAX UNAVAILABLE  ALLOWED DISRUPTIONS  AGE
nginx-ingress-controller       1              N/A              0                    0s
nginx-ingress-default-backend  1              N/A              0                    0s

==> v1/ServiceAccount
NAME           SECRETS  AGE
nginx-ingress  1        0s

==> v1beta1/ClusterRole
NAME           AGE
nginx-ingress  0s

==> v1beta1/Role
nginx-ingress  0s

==> v1beta1/RoleBinding
NAME           AGE
nginx-ingress  0s

==> v1/Pod(related)
NAME                                            READY  STATUS             RESTARTS  AGE
nginx-ingress-controller-7cb5cdc6c9-jfqw4       0/1    ContainerCreating  0         0s
nginx-ingress-default-backend-544cfb69fc-kq944  0/1    ContainerCreating  0         0s

==> v1/ConfigMap
NAME                      DATA  AGE
nginx-ingress-controller  1     0s

==> v1beta1/ClusterRoleBinding
NAME           AGE
nginx-ingress  0s


NOTES:
The nginx-ingress controller has been installed.
It may take a few minutes for the LoadBalancer IP to be available.
You can watch the status by running 'kubectl --namespace default get services -o wide -w nginx-ingress-controller'

An example Ingress that makes use of the controller:

  apiVersion: extensions/v1beta1
  kind: Ingress
  metadata:
    annotations:
      kubernetes.io/ingress.class: nginx
    name: example
    namespace: foo
  spec:
    rules:
      - host: www.example.com
        http:
          paths:
            - backend:
                serviceName: exampleService
                servicePort: 80
              path: /
    # This section is only required if TLS is to be enabled for the Ingress
    tls:
        - hosts:
            - www.example.com
          secretName: example-tls

If TLS is enabled for the Ingress, a Secret containing the certificate and key must also be provided:

  apiVersion: v1
  kind: Secret
  metadata:
    name: example-tls
    namespace: foo
  data:
    tls.crt: <base64 encoded cert>
    tls.key: <base64 encoded key>
  type: kubernetes.io/tls
  
  


  
